# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, sCrypt Inc
# This file is distributed under the same license as the sCrypt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@qq.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-26 22:58+0800\n"
"PO-Revision-Date: 2021-10-07 06:10+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scrypt-1/teams/121283/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../contracts.rst:3 ../../contracts.rst:90
#: 76e6fd039a51478c9464b700d95a8d76 1e4e1b37b7114368ade53fb6f85b7996
msgid "Standard Contracts"
msgstr "标准合约"

#: ../../contracts.rst:6 bbdd106e946b469dbe8fafec2d88d1ba
msgid "Multiple Contracts"
msgstr "多个合约"

#: ../../contracts.rst:7 c81120c0342e4d15aa39527fbfeffaa7
msgid ""
"A single file can define multiple contracts. In this case, the last contract"
" acts as the main contract and is what gets compiled. Other contracts are "
"dependencies."
msgstr "一个文件可以定义多个合约。在这种情况下，最后一个合约作为主合约并且被编译。其他合约是依赖项。"

#: ../../contracts.rst:10 86261416f4ca4c71bcfd0db742cf2adc
msgid ""
"In the following example, a standard P2PKH contract is rewritten using two "
"other contracts: a hash puzzle contract that checks the public key matches "
"the public key hash, and a Pay-to-PubKey (P2PK) contract that verifies "
"signature matches public key."
msgstr ""
"在下面这个例子中，标准的P2PKH合约被改写为两个其他合约：一个用来检查公钥和公钥哈希是否匹配的哈希谜题（hash "
"puzzle）合约，还有一个检查签名和公钥是否匹配的Pay-to-PubKey（P2PK）合约。"

#: ../../contracts.rst:44 3f592da2271e4b8ea26be11821339e3a
msgid "import"
msgstr "导入（import）"

#: ../../contracts.rst:45 b916f36c16714ee8b426822a767b276e
msgid ""
"Alternatively, the contract above can be broken into three files. The "
"``Pay2PubKeyHash`` contact ``import``\\s other two contracts as "
"dependencies. This allows reusing contracts written by others and forms the "
"basis of contract libraries."
msgstr ""
"或者，可以将上述合约分到三个文件中。 ``Pay2PubKeyHash`` 合约 ``import`` "
"其他两个合约作为依赖。这就可以重用其他人写的合约，成为构建合约库的基础。"

#: ../../contracts.rst:48 6222e5260856431b913019f826e63318
msgid ""
"A contract can be instantiated by ``new``. A ``public`` function can be "
"called from ``require``, which takes boolean expression as input."
msgstr ""
"合约可以通过 ``new`` 来实例化。``require`` 函数的参数是条件表达式， 调用合约的 ``public`` 函数可以作为条件表达式传入。"

#: ../../contracts.rst:68 5505e8036a1a4a5584787549d1fc303d
msgid "Library"
msgstr "Library 库"

#: ../../contracts.rst:69 1f71267acabd45beaf4f74f7a9e5d711
msgid ""
"A library is the same with a contract, except it does not contain any public"
" function. It is only intended to be imported by a contract or other "
"libraries. It thus cannot be independently deployed and called. It is "
"frequently used to group related constants and static functions."
msgstr "库与合约相同，只是它不包含任何公共函数。它仅用于由合约或其他库导入。因此它不能被独立部署和调用。它经常用于对相关常量和静态函数进行分组。"

#: ../../contracts.rst:91 68f362ab136d452cad1495419dbf9865
msgid ""
"sCrypt comes with standard libraries that define many commonly used "
"contracts. They are included by default and do not require explicit "
"``import`` to be used."
msgstr "sCrypt自带标准库，里面定义了许多常用的合约。标准库是默认就导入的，不需要写 ``import`` 语句。"

#: ../../contracts.rst:94 b2fb70eae1994541b3c531285290a02d
msgid "Library ``Utils``"
msgstr "``Utils`` 库"

#: ../../contracts.rst:96 36f60a37b5764cc7a4383e5d57330bdc
msgid ""
"The ``Utils`` library provides a set of commonly used utility functions, "
"such as function ``Utils.fromLEUnsigned`` converts signed integer ``n`` to "
"unsigned integer of ``l`` bytes, in little endian. And function "
"``buildOutput(bytes outputScript, int outputSatoshis) : bytes`` to build a "
"tx output from its script and satoshi amount."
msgstr ""
"``Utils`` 库提供了一组常用的实用函数，例如函数 ``Utils.fromLEUnsigned`` 将有符号整数 ``n`` "
"转换为小端字节序的无符号整数。函数 ``buildOutput(bytes outputScript, int outputSatoshis) : "
"bytes`` 从其脚本和 satoshi 数量构建 一个 tx 输出。"

#: ../../contracts.rst:100 2002735eed774814b65d6dec30560fbf
msgid ""
"The following example shows usage of the standard library ``Utils`` that "
"corresponds to ``RabinSignature`` contract."
msgstr "以下示例显示了如何在 ``RabinSignature`` 合约的中使用标准库的 ``Utils`` 库。"

#: ../../contracts.rst:121 17f77ceefcce43a49150ca44d23bd912
msgid "Library ``Tx``"
msgstr "``Tx`` 库"

#: ../../contracts.rst:122 55fd0bba946842af88dbaa7399e47f28
msgid ""
"One grave misconception regarding bitcoin script is that its access is only "
"limited to the data provided in the locking script and corresponding "
"unlocking script. Thus, its scope and capability are greatly underestimated."
msgstr "对比特币脚本的一个严重误解是，脚本只能访问锁定脚本以及对应的解锁脚本中提供的数据。因此，脚本的范围和能力被大大低估了。"

#: ../../contracts.rst:125 2e8a7900fbcd40e8ab52ccf971311137
msgid ""
"sCrypt comes with a powerful library called ``Tx`` that allows inspection of"
" the **ENTIRE TRANSACTION** containing the contract itself, besides the "
"locking script and unlocking script. It can be regarded as a pseudo opcode "
"``OP_PUSH_TX`` that pushes the current transaction into the stack, which can"
" be inspected at runtime. More precisely, it enables inspection of the "
"preimage used in signature verification defined in `BIP143`_. The format of "
"the preimage is as follows:"
msgstr ""
"sCrypt提供了一个强大的合约叫做 ``Tx``。 它允许合约访问合约所在的 整个交易 ，包括锁定脚本和解锁脚本。我们把这种方法当成一个伪操作码 "
"``OP_PUSH_TX`` ，它可以把当前交易压到栈里，这样就可以在运行时访问了。更准确地说，可以访问的是在签名校验时用到的原像 preimage "
"，在 `BIP143`_. 中有原像的详细定义。原像的数据格式如下："

#: ../../contracts.rst:130 281ca231a9254c25bbe9269ddff929d5
msgid "nVersion of the transaction (4-byte little endian)"
msgstr " nVersion of the transaction  (交易的版本号,  4字节小端)"

#: ../../contracts.rst:131 1ea8e73d795d4565b19098462c4629a8
msgid "hashPrevouts (32-byte hash)"
msgstr "hashPrevouts (输入的输出点哈希 32字节哈希值)"

#: ../../contracts.rst:132 516099494f044c0ab3181f355c702e4f
msgid "hashSequence (32-byte hash)"
msgstr "hashSequence (序列号哈希 32字节哈希值)"

#: ../../contracts.rst:133 310209478e8e4377a09b336ad895f75f
msgid "outpoint (32-byte hash + 4-byte little endian)"
msgstr "outpoint (此输入的输出点 32字节哈希值 + 4字节小端）"

#: ../../contracts.rst:134 bcfd96ec0f5544af9e6e59c4432363e0
msgid "scriptCode of the input (serialized as scripts inside CTxOuts)"
msgstr "scriptCode of the input (输入对应的UTXO的锁定脚本)"

#: ../../contracts.rst:135 f20e5486eb7648a6aa4dcd9d680e7bcc
msgid "value of the output spent by this input (8-byte little endian)"
msgstr "value of the output spent by this input (此输入对应的输出中包含的聪数 8字节小端)"

#: ../../contracts.rst:136 e0779277e7b843a09c5c732f7e7b890e
msgid "nSequence of the input (4-byte little endian)"
msgstr "nSequence of the input (此输入的序列号 4字节小端)"

#: ../../contracts.rst:137 6c49eac07e8a4f40bc48e301aada5444
msgid "hashOutputs (32-byte hash)"
msgstr "hashOutputs (输出的哈希 32字节哈希值)"

#: ../../contracts.rst:138 3717617f194c4539b385b9d4122a82cc
msgid "nLocktime of the transaction (4-byte little endian)"
msgstr "nLocktime of the transaction (交易的nLocktime 4字节小端)"

#: ../../contracts.rst:139 fcc341bab19e4f8196fd6257eb664744
msgid "sighash type of the signature (4-byte little endian)"
msgstr "sighash type of the signature (签名类型 4字节小端)"

#: ../../contracts.rst:141 736a3bfc1bf24ca0bd670e14e7118568
msgid ""
"As an example, contract ``CheckLockTimeVerify`` ensures coins are timelocked"
" and cannot be spent before ``matureTime`` is reached, similar to "
"`OP_CLTV`_."
msgstr ""
"例如，合约 ``CheckLockTimeVerify`` 确保合约中的币是时间锁定的，并且不能在时间达到 ``matureTime`` "
"之前花费，类似于 `OP_CLTV`_。"

#: ../../contracts.rst:157 38ccfc9dd98f4bfbb1ae4218538aa329
msgid ""
"More details can be found in this article `OP_PUSH_TX`_. To customize ECDSA "
"signing, such as choosing sighash type, there is a version called "
"``Tx.checkPreimageSigHashType()`` that supports custom sighash type. To "
"customize ephemeral key, there is a more general version called "
"``Tx.checkPreimageAdvanced()``. see `Advanced OP_PUSH_TX`_."
msgstr ""
"更多细节可以在这篇文章 `OP_PUSH_TX 技术`_ 中找到。要自定义 ECDSA 签名，例如选择 sighash 类型，有一个名为 "
"``Tx.checkPreimageSigHashType()`` 的版本，支持自定义 sighash 类型。要自定义临时密钥，有一个更通用的版本，称为"
" ``Tx.checkPreimageAdvanced()``。请参阅 `高级 OP_PUSH_TX 技术`_。"

#: ../../contracts.rst:162 65197e6c0e8e4894a51bae999a585dc1
msgid ""
"ScriptCode of preimage usually contains the entire locking script. The only "
"exception is when there is OP_CODESEPARATOR (OCS) in it. In this case, the "
"scriptCode is the locking script but removing everything up to and including"
" the last executed OCS before `OP_CHECKSIG`_ is executed."
msgstr ""
"原像的 ScriptCode 通常包含整个锁定脚本。唯一的例外是当其中有 OP_CODESEPARATOR (OCS) "
"时。在这种情况下，scriptCode 是锁定脚本，但在执行 `OP_CHECKSIG`_ 之前删除包括最后执行的 OCS 之前的所有内容。"

#: ../../contracts.rstNone b920a2d381e04c4181ffddd6a9f12c38
msgid "OP_CODESEPARATOR"
msgstr "OP_CODESEPARATOR"

#: ../../contracts.rst:171 0a7f250b4ed74607bad415def9238f5a
msgid ""
"The ``Tx`` library provides a set of OCS version methods to check this "
"preimage that does not contain a complete locking script. In many cases, "
"scriptCode, or portion of it, is not needed when using OP_PUSH_TX. OCS can "
"be used to cut its size. For example, in the following contract, only "
"nLocktime, of the whole preimage is needed. We use "
"``Tx.checkPreimageOCS()``, a variant of the conventional "
"``Tx.checkPreimage()``. The only difference is that an OCS is inserted right"
" before OP_CHECKSIG within the former. Also note we put "
"``Tx.checkPreimageOCS()`` as the last statement for maximal optimization."
msgstr ""
"``Tx`` 库提供了一组 OCS 版本方法来检查这个不包含完整锁定脚本的原像。在许多情况下，使用 OP_PUSH_TX 时不需要 scriptCode"
" 或只需其一部分。 OCS 可以用来削减它的大小。例如，在下面的合约中，只需要整个原像的 nLocktime。我们使用 "
"``Tx.checkPreimageOCS()``，传统的 ``Tx.checkPreimage()`` 的变体。唯一的区别是 OCS 是在前者的 "
"OP_CHECKSIG 之前插入的。另请注意，我们将 ``Tx.checkPreimageOCS()`` 作为最后一条语句以达到最大优化效果。"

#: ../../contracts.rst:192 1f51aead88f64ecd9668c7c1bf16a353
msgid "Library ``SigHash``"
msgstr "``SigHash`` 库"

#: ../../contracts.rst:193 8375e0640a4243b78bb9965eb57d5566
msgid ""
"sCrypt also provides a ``SigHash`` library to access various fields in the "
"preimage. For example, we usually use ``SigHash.scriptCode`` to access the "
"``scriptCode`` of the preimage, and use ``SigHash.value`` to access the "
"value field of the preimage, which is the value of the number of bitcoins "
"spent in this contract."
msgstr ""
"sCrypt 还提供了一个 ``SigHash`` 库来访问原像中的各个字段。例如，我们通常使用 ``SigHash.scriptCode`` "
"访问原像的 ``scriptCode`` 字段，使用 ``SigHash.value`` 访问原像的 value 字段，即在此合约中花费的比特币数量。"

#: ../../contracts.rst:215 0bbe9cd44e70474393fe6e997eedf078
msgid "Library ``HashedMap``"
msgstr "``HashedMap`` 库"

#: ../../contracts.rst:217 fc8943e0f05049cb9017fccfc0e28169
msgid ""
"The `HashedMap` library provides a map/hashtable-like data structure. Unique"
" keys and their corresponding values are hashed before being stored. Most "
"functions of `HashedMap` require not only a key, but also its index, ranked "
"by key hash in ascending order."
msgstr ""
"`HashedMap` 库提供了一种类似于哈希表的数据结构。唯一键和它们对应的值在存储之前被散列。 `HashedMap` "
"的大多数函数不仅需要一个键，还需要它的索引，按键的哈希升序排列。"

#: ../../contracts.rst:221 ../../contracts.rst:312
#: 0b00fc08717c4d519bcda827f01139a7 5dbf45ab8d4a4882ba31d75a677dcaa8
msgid "**Constructor**"
msgstr "**构造函数**"

#: ../../contracts.rst:223 a0fd781dc3e540b793691e01fc725d86
msgid ""
"``HashedMap(bytes data)`` Create an instance of ``HashedMap`` with some "
"initial data."
msgstr "``HashedMap(bytes data)`` 使用一些初始数据创建一个 ``HashedMap`` 实例。"

#: ../../contracts.rst:234 c6ec3d12d0494dabab10343b37a0b749
msgid "**SortedItem**"
msgstr "**SortedItem**"

#: ../../contracts.rst:236 f30ab31220ae4f699be02980d8ab6ce0
msgid ""
"``SortedItem<T>`` is a generic struct which holds an `item` whose type is "
"`T` and its corresponding order value `idx`."
msgstr "``SortedItem <T>`` 是一个通用结构体，它包含一个类型为 `T` 的 `item` 及 一个键索引  `idx`。"

#: ../../contracts.rst:245 2b1e3e64f901473784853345ed61d44e
msgid ""
"For most functions of `HashedMap`, a parameter named `keyWithIdx` of this "
"type is required. It means that the `key` and its corresponding `keyIndex` "
"should always be provided togather."
msgstr ""
"`HashedMap` 的大部分函数，都需要一个名为 `keyWithIdx` 的这种类型的参数。这意味着 `key` 及其对应的 `keyIndex`"
" 应该始终一起提供。"

#: ../../contracts.rst:248 ../../contracts.rst:330
#: d721ba97ad674744b01c04bd19dbe706 d721ba97ad674744b01c04bd19dbe706
msgid "**Instance methods**"
msgstr "**实例方法**"

#: ../../contracts.rst:250 bc2df016a6cf46838e30176f800de781
msgid ""
"``set(SortedItem<K> keyWithIdx, V val) : bool`` Insert or update a (`key`, "
"`val`) pair with the key index given by `keyIndex`. Returns `true` if "
"successful; otherwise returns `false`."
msgstr ""
"``set(SortedItem <K> keyWithIdx, V val) : bool`` 使用 `keyIndex` 给定的键索引插入或更新 "
"(`key`, `val`) 对。如果成功，则返回 `true` ；否则返回 `false` 。"

#: ../../contracts.rst:258 291803c0f6d948e8ab1f8f1f192c0d35
msgid ""
"``canGet(SortedItem<K> keyWithIdx, V val): bool`` Check whether we can get a"
" (`key`, `val`) pair with the key index given by `keyIndex`. Returns `true` "
"if successful; otherwise returns `false`."
msgstr ""
"``canGet(SortedItem <K> keyWithIdx, V val): bool`` 检查是否存在 (`key`, `val`) 对， "
"`keyIndex` 是键索引。如果成功，则返回 `true` ；否则返回 `false` 。"

#: ../../contracts.rst:265 5dae61304e804214ae68c0b699c9bebf
msgid ""
"``has(SortedItem<K> keyWithIdx) : bool`` Check whether `key` exists in the "
"map and its index is `keyIndex`. Returns `true` if both conditions are met; "
"otherwise returns `false`."
msgstr ""
"``has(SortedItem <K> keyWithIdx) : bool`` 检查map中是否存在 `key`，其键索引为 "
"`keyIndex`。如果两个条件都满足，则返回 `true` ；否则返回 `false`。"

#: ../../contracts.rst:272 1776b34696ca48ee99f4038413425a45
msgid ""
"``delete(SortedItem<K> keyWithIdx) : bool`` Delete the entry with given "
"`key` and the key index is `keyIndex`. Returns `true` if successful; "
"otherwise returns `false`."
msgstr ""
"``delete(SortedItem <K> keyWithIdx) : bool`` 删除给定 `key` 的条目，键索引是 "
"`keyIndex`。如果成功，则返回 `true`；否则返回 `false` 。"

#: ../../contracts.rst:279 d29d38a9958b4587bcfa821495dff205
msgid "``clear() : bool`` Delete all entries of the map."
msgstr "``clear() : bool`` 删除map的所有条目。"

#: ../../contracts.rst:286 d81cf77e79eb400eb1705e1bf441621a
msgid ""
"``size() : int`` Returns the size of map, i.e. the number of the keys it "
"contains."
msgstr "``size() : int`` 返回 HashedMap 的大小，比如它包含的键的数量。"

#: ../../contracts.rst:294 11ce64bcaba54a44b94851f7cc433a43
msgid ""
"``data() : bytes`` Returns the internal data representation of the map."
msgstr "``data() : bytes`` 返回 HashedMap 的序列化数据表示。"

#: ../../contracts.rst:304 de361a6b2ff04dfda519703884b1219e
msgid "Library ``HashedSet``"
msgstr "``HashedSet`` 库"

#: ../../contracts.rst:306 0f640dbb5fed476cb71ee59e09c07eed
msgid ""
"The `HashedSet` library provides a set-like data structure. It can be "
"regarded as a special `HashedMap` where a value is the same with its key and"
" is thus omitted. Unique values are hashed before being stored. Most "
"functions of `HashedSet` require an index, ranked by the value's sha256 hash"
" in ascending order. Similar to `HashedMap`, these functions also use "
"`SortedItem` type parameter."
msgstr ""
"`HashedSet` 库提供了一个类似集合的数据结构。它可以看作是一个特殊的 "
"`HashedMap`，其中一个值与其键相同，因此被省略。唯一值在存储之前经过哈希处理。 `HashedSet` 的大多数函数都需要一个索引，按值的 "
"sha256 哈希值升序排列。与 `HashedMap` 类似，这些函数也使用 `SortedItem` 类型参数。"

#: ../../contracts.rst:314 70244511660f4d1dacf9ef1e3a8297dd
msgid ""
"``HashedSet(bytes data)`` Create an instance of ``HashedSet`` with some "
"initial data."
msgstr "``HashedSet(bytes data)`` 使用初始数据 data 创建一个 ``HashedSet`` 实例。"

#: ../../contracts.rst:332 c9d4b256a7c846d8bed12e538ddf00c5
msgid ""
"``add(SortedItem<E> entryWithIdx) : bool`` Add `entry` to set with the key "
"index given by `index`. Returns `true` if successful; otherwise returns "
"`false`."
msgstr ""
"``add(SortedItem <E> entryWithIdx) : bool`` 添加 `entry` 以使用 `index` "
"给出的键索引进行设置。如果成功，则返回 `true`；否则返回 `false` 。"

#: ../../contracts.rst:339 b6fdee073fe04868b89bbec7ecc615a3
msgid ""
"``has(SortedItem<E> entryWithIdx) : bool`` Check whether `entry` exists in "
"the set and its index is `index`. Returns `true` if both conditions are met;"
" otherwise returns `false`."
msgstr ""
"`has(SortedItem <E> entryWithIdx) : bool` 检查集合中是否存在 `entry` 条目，其键索引为 `index`"
" 。如果两个条件都满足，则返回 `true`；否则返回 `false` 。"

#: ../../contracts.rst:346 665f51b9935c4792b20f5cf156f0ed56
msgid ""
"``delete(SortedItem<E> entryWithIdx) : bool`` Delete the entry with given "
"`entry` and the index is `index`. Returns `true` if successful; otherwise "
"returns `false`."
msgstr ""
"``delete(SortedItem <E> entryWithIdx) : bool`` 删除给定 `entry` 条目，键索引为 `index` "
"。如果成功，则返回 `true` ；否则返回 `false` 。"

#: ../../contracts.rst:353 9a5dd2e996eb42a1ba2d9a594cadc1f2
msgid "``clear() : bool`` Delete all entries of the set."
msgstr "``clear() : bool`` 删除集合的所有条目。"

#: ../../contracts.rst:360 1299265a591647cd9f6634d596529e8e
msgid ""
"``size() : int`` Returns the size of set, i.e. the number of the entries it "
"contains."
msgstr "``size() : int`` 返回集合的大小，即它包含的条目数。"

#: ../../contracts.rst:367 9d612142f7ec45d59c5e16bf824b41c2
msgid ""
"``data() : bytes`` Returns the internal data representation of the set."
msgstr "``data() : bytes`` 返回集合的内部序列化数据。"

#: ../../contracts.rst:378 c53346c8f2fb4b07932aa750785f0eb8
msgid "Library ``Constants``"
msgstr "``Constants`` 库"

#: ../../contracts.rst:380 20fd966bff4645b4aefcea7cf04891cc
msgid ""
"sCrypt defines some commonly used constant values in the library "
"``Constants``. You can use these constants anywhere in your code"
msgstr "sCrypt 在 ``Constants`` 库中定义了一些常用的常量值。你可以在代码中的任何位置使用这些常量。"

#: ../../contracts.rst:403 48d97a00462a4eeea93ca85a48bbce92
msgid "Full List"
msgstr "完整列表"

#: ../../contracts.rst:409 e18836ca88b7448383bdca656f37f001
msgid "Contract"
msgstr "合约"

#: ../../contracts.rst:410 74639848df29463bbd0cdbc7cdd55c20
msgid "Constructor parameters"
msgstr "构造函数参数"

#: ../../contracts.rst:411 ae81b75b4eba4e329e9487bf8af68f99
msgid "Public function"
msgstr "公共函数"

#: ../../contracts.rst:413 ccf250f8a70a43c0932084e3b1415a84
msgid "Utils"
msgstr "Utils"

#: ../../contracts.rst:414 ../../contracts.rst:425 ../../contracts.rst:438
#: 57686980509d48d8b11e679d4d819e53 57686980509d48d8b11e679d4d819e53
#: 57686980509d48d8b11e679d4d819e53
msgid "None"
msgstr "None"

#: ../../contracts.rst:0 2f209b74e7df47b2bb4b5f57df23770a
msgid "toLEUnsigned(int n, int l) : bytes"
msgstr "toLEUnsigned(int n, int l) : bytes"

#: ../../contracts.rst:0 a0a34a78c3a54337ab2e229df872baf2
msgid "fromLEUnsigned(bytes b) : int"
msgstr "fromLEUnsigned(bytes b) : int"

#: ../../contracts.rst:0 54eec30351c94b33935ab072e1a396b5
msgid "readVarint(bytes b) : bytes"
msgstr "readVarint(bytes b) : bytes"

#: ../../contracts.rst:0 8dfc74e732e44c83a96b48cfed584a62
msgid "writeVarint(bytes b) : bytes"
msgstr "writeVarint(bytes b) : bytes"

#: ../../contracts.rst:0 e0a94e9a8d854b6ab1d4502fd13b260b
msgid "buildOutput(bytes outputScript, int outputSatoshis) : bytes"
msgstr "buildOutput(bytes outputScript, int outputSatoshis) : bytes"

#: ../../contracts.rst:0 cda1423946364b9ba9bc2d64c92360bd
msgid "buildPublicKeyHashScript(PubKeyHash pubKeyHash) : bytes"
msgstr "buildPublicKeyHashScript(PubKeyHash pubKeyHash) : bytes"

#: ../../contracts.rst:0 0ac8b3a52dc846cf8c87233643b006db
msgid "buildOpreturnScript(bytes data) : bytes"
msgstr "buildOpreturnScript(bytes data) : bytes"

#: ../../contracts.rst:0 e29d9fe3af1046a682fbd6fde0309476
msgid ""
"isFirstCall(SigHashPreimage preimage) : bool // return whether is the first "
"call of series public function calls in stateful contract"
msgstr ""
"isFirstCall(SigHashPreimage preimage) : bool // return whether is the first "
"call of series public function calls in stateful contract"

#: ../../contracts.rst:424 d0472f484e1c4c67b39217d5b4dcdf58
msgid "Tx"
msgstr "Tx"

#: ../../contracts.rst:0 dcf3e1da16c946b78e731f46b7ac5556
msgid "checkPreimage(SigHashPreimage preimage) : bool"
msgstr "checkPreimage(SigHashPreimage preimage) : bool"

#: ../../contracts.rst:0 e15a7e36e6254f95a73672fe6c9025ab
msgid "checkPreimageOpt(SigHashPreimage rawTx) : bool"
msgstr "checkPreimageOpt(SigHashPreimage rawTx) : bool"

#: ../../contracts.rst:0 a842d9a3f3c8427a9052b704da6a2e0c
msgid ""
"checkPreimageOpt\\_(SigHashPreimage rawTx) : bool      // set sigHashType in"
" ASM"
msgstr ""
"checkPreimageOpt\\_(SigHashPreimage rawTx) : bool      // set sigHashType in"
" ASM"

#: ../../contracts.rst:0 1ab9183f74f447f2b209c8060c40efd4
msgid ""
"checkPreimageSigHashType(SigHashPreimage txPreimage, SigHashType "
"sigHashType) : bool"
msgstr ""
"checkPreimageSigHashType(SigHashPreimage txPreimage, SigHashType "
"sigHashType) : bool"

#: ../../contracts.rst:0 23794807b021420b9243ba927151a945
msgid ""
"checkPreimageAdvanced(SigHashPreimage rawTx, PrivKey privKey, PubKey pubKey,"
" int inverseK, int r, bytes rBigEndian, SigHashType sigHashType) : bool"
msgstr ""
"checkPreimageAdvanced(SigHashPreimage rawTx, PrivKey privKey, PubKey pubKey,"
" int inverseK, int r, bytes rBigEndian, SigHashType sigHashType) : bool"

#: ../../contracts.rst:0 c154124669fe46ca98842bcd0d5765e0
msgid "checkPreimageOCS(SigHashPreimage preimage) : bool"
msgstr "checkPreimageOCS(SigHashPreimage preimage) : bool"

#: ../../contracts.rst:0 7bc722ea83a548c8bc1b22f1f4b4afcb
msgid "checkPreimageOptOCS(SigHashPreimage rawTx) : bool"
msgstr "checkPreimageOptOCS(SigHashPreimage rawTx) : bool"

#: ../../contracts.rst:0 6c958c91c4d746fba08f8991e86b54b3
msgid ""
"checkPreimageOptOCS\\_(SigHashPreimage rawTx) : bool   // set sigHashType in"
" ASM"
msgstr ""
"checkPreimageOptOCS\\_(SigHashPreimage rawTx) : bool   // set sigHashType in"
" ASM"

#: ../../contracts.rst:0 8a547b258bf547698d9f8f87dfd75b30
msgid ""
"checkPreimageSigHashTypeOCS(SigHashPreimage txPreimage, SigHashType "
"sigHashType) : bool"
msgstr ""
"checkPreimageSigHashTypeOCS(SigHashPreimage txPreimage, SigHashType "
"sigHashType) : bool"

#: ../../contracts.rst:0 312db8f3fd5440a0817f77f63a36e5b2
msgid ""
"checkPreimageAdvancedOCS(SigHashPreimage rawTx, PrivKey privKey, PubKey "
"pubKey, int inverseK, int r, bytes rBigEndian, SigHashType sigHashType) : "
"bool"
msgstr ""
"checkPreimageAdvancedOCS(SigHashPreimage rawTx, PrivKey privKey, PubKey "
"pubKey, int inverseK, int r, bytes rBigEndian, SigHashType sigHashType) : "
"bool"

#: ../../contracts.rst:437 1c3cf53347e2447581b2eeee708a6ea7
msgid "SigHash"
msgstr "SigHash"

#: ../../contracts.rst:0 0cc84f450dea49e2ae8f40e9d7a29b58
msgid "nVersion(SigHashPreimage preimage) : bytes"
msgstr "nVersion(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 01e89e0a5ee34b70bed8ce7bf61ceda3
msgid "hashPrevouts(SigHashPreimage preimage) : bytes"
msgstr "hashPrevouts(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 b34117daa875413dba7454729dbb93f2
msgid "hashSequence(SigHashPreimage preimage) : bytes"
msgstr "hashSequence(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 802d2e3402784d5e890e9e6b1ecf31ce
msgid "outpoint(SigHashPreimage preimage) : bytes"
msgstr "outpoint(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 78749d7545e946f6a418a661ed914e32
msgid "scriptCode(SigHashPreimage preimage) : bytes"
msgstr "scriptCode(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 4baaf8097047456b8255a989666cd651
msgid "valueRaw(SigHashPreimage preimage) : bytes"
msgstr "valueRaw(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 36fa39b3278a47e2ba5dc75f21c370c2
msgid "value(SigHashPreimage preimage) : int"
msgstr "value(SigHashPreimage preimage) : int"

#: ../../contracts.rst:0 9ad368371725487794a590d6932720a3
msgid "nSequenceRaw(SigHashPreimage preimage) : bytes"
msgstr "nSequenceRaw(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 8f2cdf3778ae4e16a9e515b33da1956b
msgid "nSequence(SigHashPreimage preimage) : int"
msgstr "nSequence(SigHashPreimage preimage) : int"

#: ../../contracts.rst:0 88ddcbe75a6545f384a37cc9947903b1
msgid "hashOutputs(SigHashPreimage preimage) : bytes"
msgstr "hashOutputs(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 760e6af56bd84eb89b16dd606a1fb04a
msgid "nLocktimeRaw(SigHashPreimage preimage) : bytes"
msgstr "nLocktimeRaw(SigHashPreimage preimage) : bytes"

#: ../../contracts.rst:0 e6d047479156428ca33fdea462c90bbc
msgid "nLocktime(SigHashPreimage preimage) : int"
msgstr "nLocktime(SigHashPreimage preimage) : int"

#: ../../contracts.rst:0 4e774df343a149a99a0c0efebae427bd
msgid "sigHashType(SigHashPreimage preimage) : SigHashType"
msgstr "sigHashType(SigHashPreimage preimage) : SigHashType"

#: ../../contracts.rst:453 c71b8444175a42879fa56fecdbf169f5
msgid "HashedMap<K, V>"
msgstr "HashedMap<K, V>"

#: ../../contracts.rst:454 ../../contracts.rst:464
#: 671ba53e8927486c94882c0cd6b449e0 671ba53e8927486c94882c0cd6b449e0
msgid "bytes data"
msgstr "bytes data"

#: ../../contracts.rst:0 20614f2b077545ebb488c20501f7c92c
msgid "set(SortedItem<K> keyWithIdx, V val) : bool"
msgstr "set(SortedItem<K> keyWithIdx, V val) : bool"

#: ../../contracts.rst:0 b062e93fb62a4f56a8e5061b2c2db2cb
msgid "canGet(SortedItem<K> keyWithIdx, V val) : bool"
msgstr "canGet(SortedItem<K> keyWithIdx, V val) : bool"

#: ../../contracts.rst:0 e84856f8d3d949adade2cd30bffa5b72
msgid "delete(SortedItem<K> keyWithIdx) : bool"
msgstr "delete(SortedItem<K> keyWithIdx) : bool"

#: ../../contracts.rst:0 0a5b0270e26d4c5589a5a9f05ba61220
msgid "has(SortedItem<K> keyWithIdx) : bool"
msgstr "has(SortedItem<K> keyWithIdx) : bool"

#: ../../contracts.rst:0 ../../contracts.rst:0
#: 294b4c5098ef45e592831ee5436efeb9 294b4c5098ef45e592831ee5436efeb9
msgid "clear() : bool"
msgstr "clear() : bool"

#: ../../contracts.rst:0 ../../contracts.rst:0
#: 88d829cb36cc44ed8b1b4e1d39f6ac2c 88d829cb36cc44ed8b1b4e1d39f6ac2c
msgid "size() : int"
msgstr "size() : int"

#: ../../contracts.rst:0 ../../contracts.rst:0
#: d76abb493b0349f0ad7c1b8d7698db8a d76abb493b0349f0ad7c1b8d7698db8a
msgid "data() : bytes"
msgstr "data() : bytes"

#: ../../contracts.rst:463 4354d5f0c57a43ee9adfa927ec03753f
msgid "HashedSet<V>"
msgstr "HashedSet<V>"

#: ../../contracts.rst:0 0100206e4c9b4ae08b5064991c9e3896
msgid "add(SortedItem<V> entryWithIdx) : bool"
msgstr "add(SortedItem<V> entryWithIdx) : bool"

#: ../../contracts.rst:0 e84856f8d3d949adade2cd30bffa5b72
msgid "delete(SortedItem<V> entryWithIdx) : bool"
msgstr "delete(SortedItem<V> entryWithIdx) : bool"

#: ../../contracts.rst:0 9ff8fa834c924e2faa1b6bf5c77ccd50
msgid "has(SortedItem<V> entryWithIdx) : bool"
msgstr "has(SortedItem<V> entryWithIdx) : bool"
