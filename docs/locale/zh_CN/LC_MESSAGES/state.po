# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, sCrypt Inc
# This file is distributed under the same license as the sCrypt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@qq.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-21 20:28+0800\n"
"PO-Revision-Date: 2021-10-07 06:10+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scrypt-1/teams/121283/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../state.rst:3 0599856deedb4b09a70e5deebd7eccd5
msgid "Stateful Contract"
msgstr "有状态合约"

#: ../../state.rst:5 d68638bf2cea4c748aec2cbab687a859
msgid ""
"Bitcoin/sCrypt contract uses Unspent Transaction Output (UTXO) model: a "
"contract is inside a UTXO, dictating how the bitcoins in the UTXO can be "
"spent. When a UTXO is spent (i.e., an sCrypt contract public function is "
"called successfully), the contract is terminated. For a contract to keep "
"state and able to be called multiple times while carrying the mutable state,"
" these steps have to be followed."
msgstr ""
"比特币/sCrypt 合约使用未花费交易输出 (UTXO) 模型：合约位于 UTXO 内，决定如何使用 UTXO 中的比特币。当一个 UTXO "
"被花费（即成功调用 sCrypt 合约公共函数）时，合约终止。对于保持状态并能够在携带可变状态的同时被多次调用的合约，必须遵循以下这些步骤。"

#: ../../state.rst:10 faefd471ad994715a57e9edef02350fa
msgid "State Decorator"
msgstr "状态装饰器"

#: ../../state.rst:11 62383441c7fc41b09c61cf691c137345
msgid ""
"Declare any property that is part of the state with a decorator ``@state``. "
"The state property can be used the same way as a regular property."
msgstr "使用装饰器 ``@state`` 声明属于状态的任何属性。 状态属性可以像普通属性一样使用。"


#: ../../state.rst:27
#: ec08c7cd073544b7a2103e726b045720
msgid "Update the State"
msgstr "更新状态"

#: ../../state.rst:28
#: ec0a713979f0449699a84625f8c6dd9b
msgid "A contract can keep state across chained transactions by storing it in the locking script. In the following example, a contract goes from ``state0`` to ``state1``, and then to ``state2``. Input in transaction 1 ``tx1`` is spending UTXO in ``tx0``, and ``tx2`` spending ``tx1``."
msgstr "合约可以通过将状态存储在锁定脚本中来跨链式交易保持状态。 在以下示例中，合约从 ``state0`` 到 ``state1``，然后到 ``state2``。 交易 1 ``tx1`` 中的输入是在 ``tx0`` 中花费 UTXO，而 ``tx2`` 花费 ``tx1``。"

#: ../../state.rstNone 0b05234d74cd475aad8f325ff6e40d38
msgid "keep state"
msgstr "保持状态"


#: ../../state.rst:37
#: 6377bea40ccf4eff88e23c0038cfac32
msgid "When you are ready to pass the new state into the next UTXO, simply call built-in function ``this.updateState()`` with two arguments: - `txPreimage`: it is the :ref:`preimage<pushtx-label>` of the current spending transaction. It must only have one output and have the new state in it. - `amount`: the number of satoshis in that single output."
msgstr "当你准备好将新状态传递到下一个 UTXO 时，只需使用两个参数调用内置函数 ``this.updateState()``： - `txPreimage`：它是 :ref:`preimage<pushtx-label>` 当前支出交易。 它必须只有一个输出并且其中包含新状态。 - `amount`：单个输出中的 `satoshis` 数量。"



#: ../../state.rst:41
#: 942be7093f0e4102b99d5fe5037a86eb
msgid "The function is automatically generated for every stateful contract, i.e., a contract that has at least one property decorated with ``@state``. Use ``updateStateSigHashType`` if you need a customed sighash type, different from the default of ``SigHash.ALL | SigHash.FORKID``."
msgstr "该函数是为每个有状态合约自动生成的，即，一个合约至少有一个用 ``@state`` 修饰的属性。 如果你需要自定义的 `sighash` 类型，请使用 ``updateStateSigHashType``，不同于默认的 ``SigHash.ALL | SigHash.FORKID``。"



#: ../../state.rst:44
#: a98860e0544f4bb7b7fd42349c0dd6e6
msgid "The following is an example contract that records the number of times ``increment()`` have been called."
msgstr "下面是一个示例合约，它记录了 ``increment()`` 被调用的次数。"


#: ../../state.rst:65
#: 1b47b930fa25419b805cb6eb103a797e
msgid "Advanced"
msgstr "高级"

#: ../../state.rst:67
#: b83557bf44864066ad8132a045786d93
msgid "If you ever need to have more fine-grained control of the state, e.g., having multiple outputs in the spending transaction, you call another built-in function ``this.getStateScript()`` to get the locking script containing the latest stateful properties."
msgstr "如果你需要对状态进行更细粒度的控制，例如，在支出交易中有多个输出，你可以调用另一个内置函数 ``this.getStateScript()`` 来获取包含最新状态属性的锁定脚本。"

#: ../../state.rst:70
#: a98860e0544f4bb7b7fd42349c0dd6e6
msgid "Next, you use :ref:`OP_PUSH_TX<pushtx-label>` to ensure the output[s] containing the state go into the current spending transaction. It is equivalent to the contract above using ``this.updateState()``."
msgstr "接下来，你使用 :ref:`OP_PUSH_TX<pushtx-label>` 来确保包含新状态的输出进入当前的支出交易。 它相当于上面使用 ``this.updateState()`` 的合约。"

#: ../../state.rst:71 4e07790732a344a7acaedbc0aa60e91c
msgid "Restrictions"
msgstr "限制"

#: ../../state.rst:72 34eb54d09c664792964a94a99139701c
msgid ""
"For any public function to access a stateful property, it must include a "
"``SighashPreimage`` parameter that is validated with "
"``Tx.checkPreimage()``, i.e., with :ref:`OP_PUSH_TX<pushtx-label>` . This "
"does not apply to any non-public function, including constructors."
msgstr ""
"对于任何访问状态属性的公共函数，它必须包含一个通过 ``Tx.checkPreimage()`` 验证的 ``SighashPreimage`` "
"参数，即使用 :ref:`OP_PUSH_TX <pushtx-label>`。这不适用于任何非公共函数，包括构造函数。"
